[{"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\index.js":"1","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\reportWebVitals.js":"2","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\App\\App.js":"3","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\JScomponents\\stopwatch\\Stopwatch.js":"4","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\layouts\\Header\\Header.js":"5","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\Pages\\Home\\Home.js":"6","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\layouts\\MeinMenu\\MeinMenu.js":"7","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\Pages\\Stopwatchpro\\Stopwatchpro.js":"8","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\JScomponents\\stopwatch2_0\\stopwatch2_0.js":"9","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\Pages\\SapperPage\\SaperPage.js":"10","C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\JScomponents\\sapper\\Sapper.js":"11"},{"size":522,"mtime":1609956812391,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609953083144,"results":"14","hashOfConfig":"13"},{"size":360,"mtime":1610045023385,"results":"15","hashOfConfig":"13"},{"size":5852,"mtime":1609953728224,"results":"16","hashOfConfig":"13"},{"size":789,"mtime":1609974150878,"results":"17","hashOfConfig":"13"},{"size":1178,"mtime":1610048613447,"results":"18","hashOfConfig":"13"},{"size":1556,"mtime":1610048510750,"results":"19","hashOfConfig":"13"},{"size":287,"mtime":1609964808963,"results":"20","hashOfConfig":"13"},{"size":6932,"mtime":1610045873212,"results":"21","hashOfConfig":"13"},{"size":251,"mtime":1609974423466,"results":"22","hashOfConfig":"13"},{"size":23846,"mtime":1610048981887,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"7e0qdy",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\index.js",[],["48","49"],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\reportWebVitals.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\App\\App.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\JScomponents\\stopwatch\\Stopwatch.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\layouts\\Header\\Header.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\Pages\\Home\\Home.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\layouts\\MeinMenu\\MeinMenu.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\Pages\\Stopwatchpro\\Stopwatchpro.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\JScomponents\\stopwatch2_0\\stopwatch2_0.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\Pages\\SapperPage\\SaperPage.js",[],"C:\\Users\\dimagumball\\Desktop\\ITOP\\stopwatch2_0\\stopwatch\\src\\JScomponents\\sapper\\Sapper.js",["50","51"],"import React,{Component} from 'react'\r\nimport { Observable } from 'rxjs';\r\nimport './Sapper.css'\r\nimport './ButDecor.css'\r\n\r\n/**\r\n * Сапер\r\n * \r\n * Код с для таймера такойже как и в секундомере\r\n * \r\n */\r\n\r\nclass Sapper extends Component{\r\n\r\n    state={\r\n        SpaseLeft:\"\",//Для отслеживания прогреса к победе\r\n        textSize:\"\",// размер поля в квдрате\r\n        textBomb:\"\",// количество бомб\r\n        atantion:\"Classnone\",// клас для всплывающих окон\r\n        Array:[],//поле\r\n        firstClick: true,//самый первый клик на поле\r\n        doubleclick:false,//слежка для дблклик\r\n        //для выбора финального сценария\r\n        win:false,\r\n        faile:false,\r\n        //для таймера\r\n        hour:0,\r\n        min: 0,\r\n        second: 0,\r\n        fid:0,\r\n        list:[],\r\n        StartStop: \"START\",\r\n    }\r\n\r\n    \r\n\r\n    ComandWatch=(Comand)=>{// controler for more comfortable using timer (Для удбства работы с методом Time())\r\n        if(Comand===\"START\"){ // if Comand==\"START\" we jast starting timer (если Comand==\"START\" просто запускаем таймер)\r\n         this.Timer(Comand)\r\n        }\r\n        else if(Comand===\"STOP\"){// if \"STOP\" we are stoping timer and make time=0 (если \"STOP\" стоп мы обнуляем и останавливаем тамер)\r\n          this.Timer(Comand)\r\n          this.setState({\r\n            hour:0,\r\n            min: 0,\r\n            second: 0,\r\n            StartStop: \"START\",\r\n            \r\n            \r\n        });\r\n        }\r\n        \r\n      }\r\n      Timer=(Comand)=>{//Timer\r\n        if(Comand===\"START\"){//if START(это для START)\r\n          this.setState({\r\n            StartStop: \"STOP\" //if StartStop==\"STOP\" timer is runing(если StartStop==\"STOP\" таймер идет)\r\n          })\r\n          setTimeout(()=>this.Timer(null), 1);// and we restart timer with Comand=null ( и перезапускается с параметром Comand=null)\r\n        }\r\n        else if (Comand === null){//if Comand null it's meen thet one comand was activete( Если Comand=null, это значит что таймер либо работает либо одна с команд была активирована)\r\n          if(this.state.StartStop===\"STOP\"){//if StartStop=\"STOP\" timer is working(если StartStop=\"STOP\" то таймер в стационарном робочем режиме)\r\n    // here we have manipulations with time(тут мы делаем счет времени)\r\n            if(this.state.min>=59){\r\n              this.setState((prevstate) => {\r\n                return {\r\n                  min: 0,\r\n                  hour:prevstate.hour+1\r\n                };\r\n              });\r\n            }\r\n            else{\r\n              if(this.state.second>=100){\r\n                this.setState((prevstate) => {\r\n                  return {\r\n                    second: 0,\r\n                    min:prevstate.min+1\r\n                  };\r\n                });\r\n              }\r\n              else {\r\n                this.setState((prevstate) => {\r\n                  return {\r\n                    second: prevstate.second+1\r\n                  };\r\n                });\r\n              }\r\n            }\r\n            \r\n            const source = Observable.create((observer) => {// here we restar timer and try to catch err, it was part of task(тут перезапускаем таймер и ловим ошибки)\r\n              \r\n              const timer = setTimeout(() => {\r\n                  this.Timer(null)\r\n              }, 1);\r\n          \r\n              return () => {\r\n                \r\n                  clearInterval(timer);\r\n              } \r\n          });\r\n          const subscription = source.subscribe(\r\n            val => console.log('next:', val),\r\n            err => console.error('error:', err),\r\n            () => console.log('completed')\r\n          )\r\n          setTimeout(() => subscription.unsubscribe(), 4500); \r\n          }\r\n        }\r\n      }\r\n      \r\n    Save=()=>{\r\n        if(this.state.win){\r\n            this.setState((prevstate) => {\r\n                return {\r\n                  \r\n                  list:[\r\n                    ...prevstate.list,\r\n                        {\r\n                            time:prevstate.hour+\":\"+prevstate.min+\":\"+prevstate.second+\" ПОБЕДА \"+this.state.textSize+\"x\"+this.state.textSize+\" БОМБ \"+this.state.textBomb\r\n                        }\r\n                    ]\r\n                };\r\n              });\r\n        }\r\n        else{\r\n            this.setState((prevstate) => {\r\n                return {\r\n                  \r\n                  list:[\r\n                    ...prevstate.list,\r\n                        {\r\n                            time:prevstate.hour+\":\"+prevstate.min+\":\"+prevstate.second+\" ПРОИГРЫШ \"+this.state.textSize+\"x\"+this.state.textSize+\" БОМБ \"+this.state.textBomb\r\n                        }\r\n                    ]\r\n                };\r\n              });\r\n        }\r\n        \r\n    }    \r\n\r\n\r\n\r\n    tapS=(e)=>{//Здесь мы вводим размер\r\n        \r\n            this.setState({ \r\n                textSize:e.target.value\r\n            });\r\n            if(this.state.textSize<0)\r\n                this.setState((prevstate) => {//Следим чтобы размер не становился меньше 0\r\n                    return {\r\n                        textSize:0\r\n                    };\r\n                });\r\n    }\r\n    tapB=(e)=>{//Здесь количество бомб\r\n        \r\n            this.setState({ \r\n                textBomb:e.target.value\r\n            });\r\n            if(this.state.textBomb<0)\r\n                this.setState((prevstate) => {//Следим чтобы колчество бомб не становилось меньше 0\r\n                    return {\r\n                        textBomb:0\r\n                    };\r\n                });\r\n    }\r\n    Create2DArray(rows) {//Создаем дбл Массив\r\n        var arr = [];\r\n      \r\n        for (var i=0;i<rows;i++) {\r\n           arr[i] = [];\r\n        }\r\n      \r\n        return arr;\r\n      }\r\n    CreateArray=()=>{//Создаем поле\r\n        if(this.state.textSize>15||this.state.textSize<5||this.state.textSize===NaN)\r\n        {//Проверка поле недолжно быть больше 15 и меньше 5\r\n            this.setState({ \r\n                atantion:\"row_Array_atantion\"\r\n            });\r\n        }\r\n        else if(this.state.textBomb>this.state.textSize*this.state.textSize/2||this.state.textBomb===NaN||this.state.textBomb===0){\r\n            this.setState({ //Количество бомб недолжно быть больше this.state.textSize/2 и не 0\r\n                atantion:\"row_Array_atantion\"\r\n            });\r\n        }\r\n        else{//если все условия соблюдены то мы создаем поле но не заполняем бомбами\r\n            this.setState({ \r\n                atantion:\"Classnone\"\r\n            });\r\n            let arry = this.Create2DArray(this.state.textSize)\r\n            \r\n            \r\n            for(let i = 0 ;i<this.state.textSize;i++)\r\n                for(let a = 0 ;a<this.state.textSize;a++)\r\n                    arry[i][a]={//параметры клетки\r\n                        //кординаты клетки\r\n                        y:i,\r\n                        x:a,\r\n                        \r\n                        Bomb:false,//наличие бомбы\r\n                        Number:0,//кличество бомб вокруг\r\n                        CanBeBomb:true,//можеь ли быть бомбой (только для первого нажатия по полю)\r\n                        ClassB:\"but\",//графическое отображения кнопки\r\n                        count:0,\r\n                        Flag:false,//флажок для сапера\r\n                        Mis:false\r\n                    }\r\n            this.setState({//обнуляем все значения на тот случай если до этого мы уже создавали игру\r\n                        //и могли нормально начать сначала\r\n                Array:arry,\r\n                firstClick:true,\r\n                SpaseLeft:\"\",\r\n                faile:false,\r\n                win:false,\r\n                \r\n            });\r\n            this.ComandWatch(\"STOP\")//останавливаем таймер если мы пересоздаем игру\r\n            \r\n            \r\n        }\r\n    }\r\n    \r\n    ClickOnBut=(y, x)=>//здесь мы отслеживаем нажатия по кнопкам\r\n    {   \r\n        if(!this.state.doubleclick){//здесь мы проверяем дбл клик\r\n            this.setState({ \r\n                doubleclick:true,\r\n            });\r\n            setTimeout(() => { // принажатии doubleclick:true\r\n                if(this.state.doubleclick){//если в течении 200 млсек небудет еще одного нажатия \r\n                                            //то дбл клик не защитается \r\n                                            //и будет выполнена обычная проверка ячейки\r\n                                            //Проверка\r\n                    let arry=this.state.Array\r\n                    if(this.state.firstClick){//проверка на первый клик по полю\r\n                        arry[y][x].CanBeBomb=false\r\n                        arry[y][x].ClassB=\"butCliked\"\r\n                        this.CreateBomb(arry)//если это самый первый килк по полю то запускается CreateBomb() \r\n                                                //прейдите чтобы глянуть\r\n                    }\r\n                    else{\r\n                        if(!this.state.win){//если єто не первый клик то идет проверка на победу и пражения\r\n                            if(!this.state.faile){// если инрок выиграл либо проиграл его клики уже не засчитыватся\r\n                                if(arry[y][x].Bomb){//дальше если кнопка бомба\r\n                                    arry[y][x].ClassB=\"butBomb\"//ну она отображается как бомба\r\n                                    for(let i = 0 ;i<this.state.textSize;i++)// открывается сразу все поле\r\n                                        for(let a = 0 ;a<this.state.textSize;a++)\r\n                                            if(arry[i][a].Bomb)\r\n                                                arry[i][a].ClassB=\"butBomb\"\r\n                                            else{\r\n                                                arry[i][a].ClassB=\"butCliked\"\r\n                                            }\r\n                                    this.setState({ //засчитыватся поражения\r\n                                        Array:arry,\r\n                                        faile:true\r\n                                    });\r\n                                    this.Save()//записывает ваш результат\r\n                                    this.ComandWatch(\"STOP\")//и стопит таймер\r\n                                    \r\n                                }\r\n                                else if(arry[y][x].Flag){//если стоит флажок то он просто снимается \r\n                                    arry[y][x].ClassB=\"but\"\r\n                                    arry[y][x].Flag=false\r\n                                    this.setState({ \r\n                                        Array:arry,\r\n                                    });\r\n                                }\r\n                                else{\r\n                                    if(arry[y][x].ClassB!==\"butCliked\"){//если SpaseLeft===1\r\n                                        arry[y][x].ClassB=\"butCliked\"//то это последняя свободная клетка в целом\r\n                                        if(this.state.SpaseLeft===1){// и засчитыватся победа\r\n                                            this.setState((prevstate) => {\r\n                                                return {\r\n                                                    win:true,\r\n                                                    Array:arry,\r\n                                                    SpaseLeft:prevstate.SpaseLeft-1\r\n                                                };\r\n                                            });\r\n                                            this.Save()//сейв результат\r\n                                            this.ComandWatch(\"STOP\")//стоп таймер\r\n                                            \r\n                                        }\r\n                                            \r\n                                        else{//если не то ни другое \r\n                                            this.setState((prevstate) => {// то квадратик просто отображается как \r\n                                                return {// нажатый, и выводит весь текст \r\n                                                    Array:arry,\r\n                                                    SpaseLeft:prevstate.SpaseLeft-1\r\n                                                };\r\n                                            });\r\n                                        } \r\n                                    }\r\n                                    \r\n                                       \r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                    }\r\n                    this.setState({ \r\n                        doubleclick:false,\r\n                    });\r\n                }\r\n          }, 200)\r\n        }\r\n        else{//но если всетаки в течении 200 млсек был нажат клик еще раз\r\n                let arry=this.state.Array// то активируется дбл клик и ставится флажок\r\n                if(this.state.firstClick){//правда если ячейка уже была нажата то флажок не ставится\r\n                    arry[y][x].CanBeBomb=false//и еще если это первое нажатия просто жмется кнопка\r\n                    arry[y][x].ClassB=\"butCliked\"\r\n                    this.CreateBomb(arry)\r\n                }\r\n                else{\r\n                    if(arry[y][x].ClassB!==\"butCliked\"){\r\n                        arry[y][x].ClassB=\"butFlag\"\r\n                        arry[y][x].Flag=true\r\n                        if(!arry[y][x].Bomb)\r\n                            arry[y][x].Mis=true\r\n                        this.setState({ \r\n                            Array:arry,\r\n                            doubleclick:false,\r\n                        });\r\n                    }\r\n                }\r\n        }    \r\n        \r\n    }\r\n\r\n    CreateBomb=(arry)=>{//Создания бомб на поле активируется при первом клике\r\n        let y\r\n        let x\r\n        for(let i = 0 ;i<this.state.textBomb;i++){//рандомно выбирается кординаты \r\n            y=Math.floor(Math.random() * Math.floor(this.state.textSize));\r\n            x=Math.floor(Math.random() * Math.floor(this.state.textSize));\r\n            if(arry[y][x].Bomb||!arry[y][x].CanBeBomb)//и ставится бомба, правда в том случае\r\n                i--;                                    // когда эта кордината не занята и CanBeBomb===true(такое есть только у самой первой ячейки которую нажмут)\r\n            else\r\n                {\r\n                    arry[y][x].Bomb=true\r\n                    if(x>0&y>0&y<this.state.textSize-1&x<this.state.textSize-1){//Дальше идет проверка всех бомб в\r\n                        arry[y][x+1].Number=arry[y][x+1].Number+1               //округе добавляется к их Number+1\r\n                        arry[y][x-1].Number=arry[y][x-1].Number+1               \r\n                        arry[y+1][x].Number=arry[y+1][x].Number+1\r\n                        arry[y-1][x].Number=arry[y-1][x].Number+1\r\n\r\n                        arry[y+1][x+1].Number=arry[y+1][x+1].Number+1\r\n                        arry[y-1][x+1].Number=arry[y-1][x+1].Number+1\r\n\r\n                        arry[y-1][x-1].Number=arry[y-1][x-1].Number+1\r\n                        arry[y+1][x-1].Number=arry[y+1][x-1].Number+1\r\n                    }\r\n                    else if(x===0&y>0&y<this.state.textSize-1&x<this.state.textSize-1){\r\n                        arry[y][x+1].Number=arry[y][x+1].Number+1\r\n                        arry[y+1][x].Number=arry[y+1][x].Number+1\r\n                        arry[y-1][x].Number=arry[y-1][x].Number+1\r\n                        arry[y+1][x+1].Number=arry[y+1][x+1].Number+1\r\n                        arry[y-1][x+1].Number=arry[y-1][x+1].Number+1\r\n                    }\r\n                    else if(x>0&y>0&y<this.state.textSize-1&x===this.state.textSize-1){\r\n                        arry[y][x-1].Number=arry[y][x-1].Number+1\r\n                        arry[y+1][x].Number=arry[y+1][x].Number+1\r\n                        arry[y-1][x].Number=arry[y-1][x].Number+1\r\n                        arry[y-1][x-1].Number=arry[y-1][x-1].Number+1\r\n                        arry[y+1][x-1].Number=arry[y+1][x-1].Number+1\r\n                    }\r\n                    else if(x>0&y===0&y<this.state.textSize-1&x<this.state.textSize-1){\r\n                        arry[y][x+1].Number=arry[y][x+1].Number+1\r\n                        arry[y][x-1].Number=arry[y][x-1].Number+1\r\n                        arry[y+1][x].Number=arry[y+1][x].Number+1\r\n                        arry[y+1][x-1].Number=arry[y+1][x-1].Number+1\r\n                        arry[y+1][x+1].Number=arry[y+1][x+1].Number+1\r\n                    }\r\n                    else if(x>0&y>0&y===this.state.textSize-1&x<this.state.textSize-1){\r\n                        arry[y][x+1].Number=arry[y][x+1].Number+1\r\n                        arry[y][x-1].Number=arry[y][x-1].Number+1\r\n                        arry[y-1][x].Number=arry[y-1][x].Number+1\r\n                        arry[y-1][x+1].Number=arry[y-1][x+1].Number+1\r\n                        arry[y-1][x-1].Number=arry[y-1][x-1].Number+1\r\n                    }\r\n                    else if(x===0&y===0&y<this.state.textSize-1&x<this.state.textSize-1){\r\n                        arry[y][x+1].Number=arry[y][x+1].Number+1\r\n                        arry[y+1][x].Number=arry[y+1][x].Number+1\r\n                        arry[y+1][x+1].Number=arry[y+1][x+1].Number+1\r\n                    }\r\n                    else if(x>0&y>0&y===this.state.textSize-1&x===this.state.textSize-1){\r\n                        arry[y][x-1].Number=arry[y][x-1].Number+1\r\n                        arry[y-1][x].Number=arry[y-1][x].Number+1\r\n                        arry[y-1][x-1].Number=arry[y-1][x-1].Number+1\r\n                    }\r\n                    else if(x===0&y>0&y===this.state.textSize-1&x<this.state.textSize-1){\r\n                        arry[y][x+1].Number=arry[y][x+1].Number+1\r\n                        arry[y-1][x].Number=arry[y-1][x].Number+1\r\n                        arry[y-1][x+1].Number=arry[y-1][x+1].Number+1\r\n                    }\r\n                    else if(x>0&y===0&y<this.state.textSize-1&x===this.state.textSize-1){\r\n                        arry[y][x-1].Number=arry[y][x-1].Number+1\r\n                        arry[y+1][x].Number=arry[y+1][x].Number+1\r\n                        arry[y+1][x-1].Number=arry[y+1][x-1].Number+1\r\n                    }\r\n                }\r\n                this.setState((prevstate) => {\r\n                    return {//перезапись масива\r\n                        Array:arry,\r\n                        SpaseLeft:prevstate.textSize*prevstate.textSize-prevstate.textBomb-1,\r\n                        firstClick:false,\r\n                    };\r\n                  });\r\n                  this.ComandWatch(\"START\")//и запускаем таймер\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"Sapper\">\r\n                <div className=\"Create_Array\">\r\n                    <div className=\"row_Array\">\r\n                        ARRAY SIZE <input type='number' value={this.state.textSize} onChange={this.tapS}></input>\r\n                    </div>\r\n                    <div className=\"row_Array\">\r\n                        NUMBER OF BOMBS <input type='number' value={this.state.textBomb} onChange={this.tapB}></input>\r\n                    </div>\r\n                    <div className={this.state.atantion}>\r\n                        SIZE HEVE TO BE BETWEEN 5 AND 15 AND NUMBER OF BOMB CANT BE MORE THEN SIZE\r\n                        <br/>\r\n                        Справа введите размер между 5 и 15, и количество бомб не больше размера деленного на 2 и не 0\r\n                    </div>\r\n                    <button onClick={this.CreateArray}>\r\n                        Create\r\n                    </button>\r\n                </div>\r\n                <div className=\"Array_Panel\">\r\n                    <div className=\"Timer_Array\">\r\n                        {this.state.hour}:{this.state.min}:{this.state.second}\r\n                    </div>\r\n                    <div className=\"Timer_Array\">\r\n                        {!this.state.faile?(!this.state.win?(this.state.SpaseLeft===\"\"?\"\":\"К победе осталось \"+this.state.SpaseLeft):\"Вы выиграли, начинайте сначала\"):\"Вы проиграли, начинайте сначала\"}\r\n                    </div>\r\n\r\n                    \r\n                    <div className=\"Array\">\r\n                        {\r\n                            \r\n                            this.state.Array.map((items)=>(\r\n                                <div className=\"but_row\" key={items[0].y}>\r\n                                    \r\n                                    {\r\n                                        \r\n                                        items.map((item)=>(\r\n                                            <div key={item.y+\" \"+item.x} className={item.ClassB} onClick={()=>this.ClickOnBut(item.y, item.x)}>\r\n                                                {item.ClassB===\"butCliked\"?(item.Number===0?\"\":item.Number):\"\"}\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n                                \r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <div  className=\"Timer_Array\">\r\n                    {\r\n                        this.state.list.map((key)=>(\r\n                            <div key={key.time}>\r\n                                {key.time}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n          );\r\n    }\r\n  \r\n}\r\n\r\nexport default Sapper;\r\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":177,"column":59,"nodeType":"58","messageId":"59","endLine":177,"endColumn":84},{"ruleId":"56","severity":1,"message":"57","line":183,"column":80,"nodeType":"58","messageId":"59","endLine":183,"endColumn":105},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","no-global-assign","no-unsafe-negation"]